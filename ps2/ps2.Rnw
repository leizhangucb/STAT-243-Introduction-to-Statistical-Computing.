\documentclass{article}

\begin{document}

\section{Problem 1}
\subsection{Problem a}


An ASCII character takes one bytes, and white space takes no bytes. The tmp1 file contains 1e6 ASCII characters and 1e6 commas, so the file is 2e6 bytes.

tmp2 contains 1e6 ASCII characters, white spaces and 1 "\\n",so it takes 1e6+1 bytes.

tmp3 is a .Rda file. It has 1e6 numbers,eaching occupying 7.6 bytes. 

tmp4 is a csv file. Each string contains 18-19 digits,each occupying one bytes. So the file is around 18*1e6 bytes.

Since all numbers in tmp5 has been rounded into twodecimal points, each string contains 5-6 digits. So tmp5 is around 5*1e6 bytes.


\subsection{Problem b}
The file sisd default set ot compression when saving strings to .Rda form. So generally the file is smaller. Since tmp7 contains only 'a', the compression level can be higher. So tmp7 is even smaller.


\section{Problem 2}
\subsection{Problem a}
In this function, I first get the Google Scholar ID by searching the firstname+lastname in the Google Scholar website. I then use the id to construct the corresponding citication page. I utilize htmlParse to get the citation page. The return is a list consisting of Scholar ID and the corresponding html.

<<>>=
scholar<-function(firstname,lastname){
baseURL<-"http://scholar.google.com/citations?view_op=search_authors&mauthors="
name<-paste0(firstname,"+",lastname)

ending<-"&hl=en&oi=ao"
idURL<-paste0(baseURL,name,ending)

library(RCurl)
library(XML)

idpage<-htmlParse(idURL)

links<-getHTMLLinks(idpage)
index<-grep("user=.*&",links,perl=TRUE)
a<-links[index[1]]
userid<-substr(a,17,28)
citationURL<-paste0("http://scholar.google.com/citations?user=",userid,"&hl=en")
citationpage<-htmlParse(citationURL)
output<-list(userid,citationpage)
return(output)

}
@

\subsection{Problem b}
In this function, I first get the Google Scholar ID by searching the firstname+lastname in the Google Scholar website. I then use the id to construct the corresponding citication page. I utilize the readHTMLtable to get the citication table and refine it.
<<>>=
citationform<-function(firstname,lastname){
baseURL<-"http://scholar.google.com/citations?view_op=search_authors&mauthors="
name<-paste0(firstname,"+",lastname)

ending<-"&hl=en&oi=ao"
idURL<-paste0(baseURL,name,ending)

library(RCurl)
library(XML)
  
idpage<-htmlParse(idURL)
links<-getHTMLLinks(idpage)
index<-grep("user=.*&",links,perl=TRUE)
a<-links[index[1]]
userid<-substr(a,17,28)
citationURL<-paste0("http://scholar.google.com/citations?user=",userid,"&hl=en")
citationpage<-htmlParse(citationURL)
     
html<-readLines(citationURL)
tbls<-readHTMLTable(html,header=TRUE,as.data.frame=TRUE,which=2)
library(tidyr)
names(tbls)[1]="Title"
tblsnew<-separate(tbls,col="Title",c("Title","Authors","Journal","location","year"),sep=",",remove=TRUE,fill="right")
tblsnew<-unite(tblsnew,Journal,Journal,location,sep=", ",remove=TRUE)
tblsnew<-tblsnew[,-c(4)]
return(head(tblsnew))
}

citationform("Geoffrey","Hinton")
citationform("Allen","Craig")
@

\subsection{Problem c}
In this function, I use two if-else to test if the function will fail and give the corresponding notification. 
The first one is to check if the user provides valid input.
The second one is to check if Google Scholar returns a rresult.
<<>>=
scholartest1<-function(firstname,lastname){
#The first if-else checks if the user provides valid input
if sum((class(firstname)!="character"),(class(lastname)!="character"))[1]>0
 print("Invalid input")
else
 print("The input is valid")
}

scholartest2<-function(firstname,lastname){
baseURL<-"http://scholar.google.com/citations?view_op=search_authors&mauthors="
name<-paste0(firstname,"+",lastname)

ending<-"&hl=en&oi=ao"
idURL<-paste0(baseURL,name,ending)

library(RCurl)
library(XML)
  
idpage<-htmlParse(idURL)
links<-getHTMLLinks(idpage)
index<-grep("user=.*&",links,perl=TRUE)

#The second if-else checks if Google Scholar returns a result
if sum(!is.null(index))==0
  print("No scholar matches")
else
  print("We've found the author")
}
scholartest1("Geoffrey","Hinton")
scholartest2("Geoffrey","Hinton")

@

The next part use testthat. 

<<>>=
citationform<-function(firstname,lastname){
baseURL<-"http://scholar.google.com/citations?view_op=search_authors&mauthors="
name<-paste0(firstname,"+",lastname)

ending<-"&hl=en&oi=ao"
idURL<-paste0(baseURL,name,ending)

library(RCurl)
library(XML)
  
idpage<-htmlParse(idURL)
links<-getHTMLLinks(idpage)
index<-grep("user=.*&",links,perl=TRUE)
a<-links[index[1]]
userid<-substr(a,17,28)
citationURL<-paste0("http://scholar.google.com/citations?user=",userid,"&hl=en")
citationpage<-htmlParse(citationURL)
     
html<-readLines(citationURL)
tbls<-readHTMLTable(html,header=TRUE,as.data.frame=TRUE,which=2)
library(tidyr)
names(tbls)[1]="Title"
tblsnew<-separate(tbls,col="Title",c("Title","Authors","Journal","location","year"),sep=",",remove=TRUE,fill="right")
tblsnew<-unite(tblsnew,Journal,Journal,location,sep=", ",remove=TRUE)
tblsnew<-tblsnew[,-c(4)]
library(testthat)
expect_that(dim(tblsnew)[2],equals(5)) 
}
@


\end{document}